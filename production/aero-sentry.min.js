(function(){"use strict";const config={serverUrl:'./server.php',endPoint:'success.php',userAgentsFile:'data/user-agents.json',enableClientDataCollection:!1,showLoadingScreen:!0,anomaliesCountLimit:3,debug:!1,};let csrfToken='';let difficulty=3;let challenge='';let threshold=4;let userInteracted=!1;if(window.location.protocol!=='https:'){config.enableClientDataCollection=!1;console.warn('Warning: Server URL should be HTTPS! Data collection will be disabled.')}
const log=(...args)=>{if(config.debug){console.log(...args)}};const errorLog=(...args)=>{if(config.debug){console.error(...args)}};const collectData=()=>{const data={userAgent:navigator.userAgent||'',language:navigator.language||navigator.userLanguage||'',webgl:{vendor:'',renderer:''},webGLSupported:!1,languages:[],rtt:navigator.connection?navigator.connection.rtt:null,screen:{width:window.innerWidth,height:window.innerHeight,outerWidth:window.outerWidth,outerHeight:window.outerHeight},touchPoints:navigator.msMaxTouchPoints||navigator.maxTouchPoints||0,cookieEnabled:navigator.cookieEnabled,browserType:getBrowserKind(navigator.userAgent),platform:navigator.platform||''};try{const canvas=document.createElement('canvas');const gl=canvas.getContext('webgl');if(gl){data.webgl.vendor=gl.getParameter(gl.VENDOR);data.webgl.renderer=gl.getParameter(gl.RENDERER);data.webGLSupported=!0}}catch(e){}
try{data.languages=Array.isArray(navigator.languages)?navigator.languages.slice(0,3):[navigator.language]}catch(e){}
return data};const countTruthy=(values)=>values.filter(Boolean).length;const getBrowserEngineKind=()=>{const n=navigator,w=window;if(countTruthy(['webkitPersistentStorage' in n,'webkitTemporaryStorage' in n,'webkitResolveLocalFileSystemURL' in w,'BatteryManager' in w,'webkitMediaStream' in w,'webkitSpeechGrammar' in w,])>=5)return'Chromium';if(countTruthy(['ApplePayError' in w,'CSSPrimitiveValue' in w,'Counter' in w,'getStorageUpdates' in n,'WebKitMediaKeys' in w,])>=4)return'Webkit';if(countTruthy(['buildID' in n,'MozAppearance' in(document.documentElement?.style??{}),'onmozfullscreenchange' in w,'mozInnerScreenX' in w,'CSSMozDocumentRule' in w,'CanvasCaptureMediaStream' in w,])>=4)return'Gecko';return'Unknown'};const getBrowserKind=(userAgent)=>{userAgent=userAgent.toLowerCase();if(userAgent.includes('edg/'))return'Edge';if(userAgent.includes('trident')||userAgent.includes('msie'))return'IE';if(userAgent.includes('firefox'))return'Firefox';if(userAgent.includes('chrome')&&!userAgent.includes('edg/')&&!userAgent.includes('opr'))return'Chrome';if(userAgent.includes('chromium'))return'Chromium';if(userAgent.includes('safari')&&!userAgent.includes('chrome'))return'Safari';if(userAgent.includes('opera')||userAgent.includes('opr'))return'Opera';if(userAgent.includes('wechat'))return'WeChat';if(userAgent.includes('brave'))return'Brave';if(userAgent.includes('vivaldi'))return'Vivaldi';if(userAgent.includes('yandex'))return'Yandex';return'Unknown'};const suspiciousUA=async(userAgent,allowGoodBots=!0)=>{userAgent=userAgent.toLowerCase();let data={};try{const response=await fetch(config.userAgentsFile,{method:'GET',mode:'cors',headers:{'Content-Type':'application/json','Accept':'application/json','Cache-Control':'no-cache'}});if(response.ok){data=await response.json();if(!data||!Array.isArray(data.suspiciousAgents)||!Array.isArray(data.crawlerBots)){throw new Error('Invalid user-agents.json format.')}}else{data={"suspiciousAgents":["curl","perl","python","java","bot","crawl","puppeteer","puppet","phantomjs","awesomium","electron","headlesschrome","slimerjs"],"crawlerBots":[]};log('Failed to fetch user-agents.json, using backup.')}
const suspiciousAgents=data.suspiciousAgents||[];const crawlerBots=data.crawlerBots||[];const combinedList=allowGoodBots?[...suspiciousAgents,...crawlerBots]:suspiciousAgents;const result=combinedList.filter(botUA=>userAgent.includes(botUA));if(result.length>0){return result[0]}
return!1}catch(error){errorLog('Error loading or processing user-agents.json:',error);return!1}};const isBrowserEngineValid=(data)=>{const browser=getBrowserKind(data.userAgent);const engine=getBrowserEngineKind();const validPairs={'Firefox':'Gecko','Chrome':'Chromium','Edge':'Chromium','Safari':'Webkit','Opera':'Chromium','Brave':'Chromium','Vivaldi':'Chromium','Yandex':'Chromium','WeChat':'Chromium'};return validPairs[browser]===engine};const isWebGLVerified=(data)=>{const expectedWebGL={'Mozilla':'Mozilla','Google Inc.':/ANGLE/i,'Apple':/WebKit/i,'Samsung':/Samsung/i,'Brave Software':/ANGLE/i,'Yandex':/ANGLE/i,'Vivaldi Technologies':/ANGLE/i,'WebKit':'WebKit WebGL',};return expectedWebGL[data.webgl.vendor]===data.webgl.renderer};const isMobileUserAgent=(userAgent,touchPoints,screen)=>{userAgent=userAgent.toLowerCase();if(touchPoints<1){return!1}
if(/android|; wv/i.test(userAgent))return!0;if(/iphone|safari/i.test(userAgent))return!0;if(/samsung/i.test(userAgent))return!0;if(/huawei/i.test(userAgent))return!0;if(/tablet|kindle|ipad/i.test(userAgent))return!0;if(/(midp|mmp|mobile|sonyericsson|webos|xda)/i.test(userAgent))return!0;if(screen){if(screen.width<screen.height)return!0}
return!1};const detectBot=async(data)=>{const detection={isBot:!1,detectedBotKind:'unknown',anomalies:[]};const isHeadless=()=>{return(data.userAgent.includes('HeadlessChrome')||navigator.webdriver||!navigator.languages||navigator.languages.length===0||window.outerWidth===0||window.outerHeight===0||!navigator.permissions)};const suspectLanguages=()=>data.languages.length===0||data.languages.some(lang=>!lang);const unusualScreen=()=>data.screen.width<=1||data.screen.height<=1;const webGLAnomaly=()=>!isWebGLVerified(data);const browserEngineMismatch=()=>!isBrowserEngineValid(data);const checkCookies=()=>!data.cookieEnabled;const checkRTC=()=>data.rtt!==null&&(data.rtt<=0||data.rtt>2000);const isChromeDevTools=()=>window.chrome!==undefined;const isMobile=()=>isMobileUserAgent(data.userAgent,data.touchPoints,data.screen);if(suspectLanguages())detection.anomalies.push('Suspect language configuration');if(webGLAnomaly())detection.anomalies.push('WebGL anomaly detected');if(browserEngineMismatch())detection.anomalies.push('Browser-Engine mismatch detected');if(checkCookies())detection.anomalies.push('Cookies are disabled');if(checkRTC())detection.anomalies.push('Unusual RTT detected');if(isChromeDevTools())detection.anomalies.push('Chrome DevTools detected');if(isHeadless()){detection.isBot=!0;detection.detectedBotKind='headless';detection.anomalies.push('Headless browser detected')}
if(unusualScreen()){detection.isBot=!0;detection.detectedBotKind='unusual_screen';detection.anomalies.push('Unusual screen size detected')}
const suspiciousUAResult=await suspiciousUA(data.userAgent);if(suspiciousUAResult&&suspiciousUAResult!==!1){detection.isBot=!0;detection.detectedBotKind=suspiciousUAResult;detection.anomalies.push('Suspicious User-Agent detected')}
data.isMobile=isMobile()?'true':'false';detection.anomaliesCount=detection.anomalies.length;if(detection.anomaliesCount>=config.anomaliesCountLimit){detection.isBot=!0}
return detection};const displayBotDetectionResults=async()=>{try{const data=collectData();const detectionResult=await detectBot(data);const result=config.enableClientDataCollection?{browserComponents:data,detectionResult:detectionResult}:{detectionResult:detectionResult};return result}catch(error){throw error}};async function checkNetworkStatus(){return navigator.onLine}
function verifyConfig(){let errorMessage='';if(typeof config.serverUrl!=='string'||config.serverUrl.trim()===''){errorMessage='Invalid server URL. Please check your configuration.'}
if(typeof config.endPoint!=='string'||config.endPoint.trim()===''){errorMessage='Invalid end-point. Please check your configuration.'}
if(errorMessage){console.error(errorMessage);return!1}
return!0}
function redirectToSuccessPage(){if(document.querySelector('.spinner-small'))document.querySelector('.spinner-small').style.opacity='0';let url;url=new URL(config.endPoint,window.location.href);if(url&&url.origin===window.location.origin){window.location.replace(url);return}else{console.error('Invalid end-point. Please check your configuration.');return}}
async function initApp(){if(!checkNetworkStatus()){errorLog('No network connection.');return}
if(!verifyConfig())return;if(config.showLoadingScreen)loadLoadingScreen();try{const resultClient=await displayBotDetectionResults();if(resultClient){delete resultClient.detectionResult.anomalies;if(config.enableClientDataCollection&&window.location.protocol==='https:'){sendClientInfoGetCredentals(resultClient)}else{delete resultClient.browserComponents;sendClientInfoGetCredentals(resultClient)}}else{sendClientInfoGetCredentals({collectDataFailed:!0})}}catch(error){errorLog("Error:",error)}}
async function sendClientInfoGetCredentals(data={}){try{if(!checkNetworkStatus()){throw new Error('No network connection.')}
let jsBotDetected=!1;if(data.detectionResult&&data.detectionResult.isBot===!0){jsBotDetected=!0}
if(config.enableClientDataCollection&&data.collectDataFailed){jsBotDetected=!0}
data.nonice=generateNonce();const response=await fetch(config.serverUrl,{method:'POST',mode:'cors',cache:'no-cache',credentials:'same-origin',headers:{'Content-Type':'application/json','Accept':'application/json','Referrer-Policy':'strict-origin'},body:JSON.stringify(data)});if(!response.ok){throw new Error('An error occurred while processing your request.')}
const result=await response.json();if(!result){throw new Error('Invalid server response')}
if(config.debug&&result.error)throw new Error(result.error.message);if(result.reload===!0){retryConnection(!1);return}
csrfToken=result.csrfToken||'';challenge=result.challenge||'';difficulty=Number(result.difficulty)||difficulty;threshold=Number(result.threshold)||threshold;fastInitiateConnection(jsBotDetected)}catch(error){errorLog('Request failed:',error);errorStopLoadingScreen()}}
async function fastInitiateConnection(jsBotDetected=!1){try{if(!checkNetworkStatus()){throw new Error('No network connection.')}
if(!csrfToken||typeof csrfToken!=='string'){retryConnection(!0);throw new Error('Token not found')}
const vgText=document.querySelector('.vg-text');if(vgText)vgText.textContent='Validating...';hasUserInteracted();if(!challenge||typeof challenge!=='string'){throw new Error('Missing or invalid challenge')}
const nonce=await solvePoW(challenge);const submitResponse=await fetch(config.serverUrl,{method:'POST',mode:'cors',cache:'no-cache',credentials:'include',headers:{'Content-Type':'application/json','Authorization':`Bearer ${csrfToken}`,'Accept':'application/json','Referrer-Policy':'strict-origin'},body:JSON.stringify({nonce})});if(!submitResponse.ok){throw new Error('An error occurred while processing your request.')}
const result=await submitResponse.json();if(!result){throw new Error('Invalid server response')}
if(config.debug&&result.error)console.error(result.error.message);if(result.reload===!0){retryConnection(!0);return}
if(result.success===!0){if(config.showLoadingScreen){if(difficulty>=threshold||jsBotDetected===!0){addCheckboxForm().catch(error=>{errorLog(error);errorStopLoadingScreen()}).then(checkboxFormAdded=>{if(checkboxFormAdded===!0){redirectToSuccessPage()}})}else{if(vgText)vgText.textContent='Done!';redirectToSuccessPage()}}else{if(difficulty>=threshold||jsBotDetected===!0){redirectToSuccessPage()}else{redirectToSuccessPage()}}}else{retryConnection(!1);throw new Error('Request failed.')}}catch(error){errorLog(error);errorStopLoadingScreen()}}
function addCheckboxForm(){return new Promise((resolve,reject)=>{const checkbox=document.getElementById('vg-checkbox');const spinner=document.querySelector('.spinner-small');const vgText=document.querySelector('.vg-text');if(spinner){spinner.remove()}
if(checkbox){checkbox.checked=!1;checkbox.disabled=!1;checkbox.style.display='flex';vgText.textContent='Click to proceed';checkbox.addEventListener('change',async()=>{if(checkbox.checked){checkbox.disabled=!0;try{const success=await sendCheckboxForm(csrfToken);if(success){resolve(!0)}else{reject(new Error('Checkbox form submission invalid.'))}}catch(error){errorLog('Error in sendCheckboxForm:',error);reject(error)}}})}else{reject(new Error('Checkbox not found.'))}})}
async function sendCheckboxForm(csrfToken){try{if(!checkNetworkStatus()){throw new Error('No network connection.')}
if(!csrfToken||typeof csrfToken!=='string'){retryConnection(!0);throw new Error('Token not found')}
const interacted=hasUserInteracted();const response=await fetch(config.serverUrl,{method:'POST',mode:'cors',credentials:'include',headers:{'Content-Type':'application/json','Authorization':`Bearer ${csrfToken}`,'Accept':'application/json','Referrer-Policy':'strict-origin'},body:JSON.stringify({checkboxClicked:!0,interacted:interacted})});if(!response.ok){throw new Error('An error occurred while processing your request.')}
const result=await response.json();if(!result){throw new Error('Invalid server response')}
if(config.debug&&result.error)console.error(result.error.message);if(result.reload===!0){retryConnection(!0);return!1}
if(result.success===!0){return!0}else{retryConnection(!1);throw new Error('Request failed.')}}catch(error){errorLog('Error in sendCheckboxForm:',error);throw error}}
function generateNonce(){const nonceFc=Array.from(crypto.getRandomValues(new Uint8Array(10))).map(x=>x.toString(16).padStart(2,'0')).join('');return nonceFc}
function retryConnection(clearCsrf=!1){if(clearCsrf===!0){csrfToken='';challenge=''}
const hasRunRetry=sessionStorage.getItem('hasRunRetry')?!0:!1;if(hasRunRetry!=='true'){sessionStorage.setItem('hasRunRetry','true');location.reload(!0)}}
function errorStopLoadingScreen(){const loadingScreen=document.getElementById('loading-screen');if(loadingScreen){const vgText=document.querySelector('.vg-text');const spinner=document.querySelector('.spinner-small');const checkbox=document.getElementById('vg-checkbox');if(checkbox)checkbox.style.display='none';if(spinner)spinner.remove();if(vgText)vgText.textContent='A error occurred.';clearLoadingScreen()}}
function clearLoadingScreen(){const loadingScreen=document.getElementById('loading-screen');if(loadingScreen){loadingScreen.remove()}}
function loadLoadingScreen(){const loadingScreenHtml=`
      <div class="loading-screen" id="loading-screen" role="alert" aria-live="assertive">
        <div class="vg-container">
          <div class="section-one">
            <div class="spinner-small" role="status" aria-label="Loading indicator"></div>
            <input type="checkbox" id="vg-checkbox" name="vg-checkbox" class="captcha-checkbox" aria-labelledby="vg-text" disabled>
          </div>
          <div class="section-two">
            <span class="vg-text" id="vg-text" aria-hidden="true">Loading...</span>
            <noscript class="vg-text noscript">Please enable JavaScript to continue.</noscript>
          </div>
        </div>
      </div>
    `;document.body.insertAdjacentHTML('beforeend',loadingScreenHtml)}
function hasUserInteracted(){if(userInteracted)return!0;const onInteraction=()=>{userInteracted=!0;document.removeEventListener('mousemove',onInteraction);document.removeEventListener('scroll',onInteraction);document.removeEventListener('keydown',onInteraction);document.removeEventListener('touchstart',onInteraction)};document.addEventListener('mousemove',onInteraction);document.addEventListener('scroll',onInteraction);document.addEventListener('keydown',onInteraction);document.addEventListener('touchstart',onInteraction);return userInteracted}
async function solvePoW(challenge){let nonce=0;const target='0'.repeat(difficulty);while(!0){const hashBuffer=await crypto.subtle.digest('SHA-256',new TextEncoder().encode(challenge+nonce));const hashHex=Array.from(new Uint8Array(hashBuffer)).map(b=>b.toString(16).padStart(2,'0')).join('');if(hashHex.startsWith(target)){return nonce.toString()}
nonce++}}
window.initDosProtection=(userConfig={})=>{Object.assign(config,userConfig);window.addEventListener('load',initApp)};window.initDosProtection()})()